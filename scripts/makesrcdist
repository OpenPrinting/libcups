#!/bin/sh
#
# makesrcdist - make a source distribution of CUPS.
#

TMPDIR="${TMPDIR:=/tmp}"

# Make sure we are running in the right directory...
if test ! -f scripts/makesrcdist; then
        echo "Run this script from the top-level CUPS source directory, e.g.:"
        echo ""
        echo "    scripts/makesrcdist $*"
        echo ""
        exit 1
fi

# See if we have local changes (other than this script...)
if (git status | grep -v makesrcdist | grep -v makerpm | grep -q modified:); then
        echo Local changes remain:
        git status | grep -v makesrcdist | grep modified:
        exit 1
fi

# Prep for snapshot or version release...
if test $# = 0; then
	# Compute version for snapshot
	rev=`git show --oneline | head -1 | awk '{print $1}'`
	version="3.0git"
	fileversion="3.0git-$rev"
	fileurl="file://$TMPDIR/cups-${fileversion}-source.tar.gz"
	SIGNFILES=no
else
	# Use version from command-line
	rev="1"
	version=$1
	fileversion=$1
	fileurl="https://github.com/openprinting/libcups/releases/download/v$fileversion/libcups-${fileversion}-source.tar.gz"
	SIGNFILES=yes

	echo Validating sources...
	cupsversionpatch="$(echo $version | awk -F. '{if (NF == 3) { print $3 } else { print "0" } }' | sed -e '1,$s/op[0-9]*$//')"
	cupsversion=$(printf "3.00%02d" $cupsversionpatch)

        temp="$(grep AC_INIT configure.ac | awk -F, '{print $2}' | sed -e '1,$s/^\[//' -e '1,$s/\]$//')"
        if test "$temp" != $version; then
		echo "Still need to update version to $version in configure.ac (saw $temp)"
		exit 1
	fi

	temp="$(grep CUPS_VERSION cups/cups.h | grep -v CUPS_VERSION_ | awk '{print $4}')"
	if test "$temp" != $cupsversion; then
		echo "Still need to update CUPS_VERSION to $cupsversion in cups/cups.h (saw $temp)"
		exit 1
	fi

	temp="$(grep CUPS_VERSION_PATCH cups/cups.h | awk '{print $4}')"
	if test "$temp" != $cupsversionpatch; then
		echo "Still need to update CUPS_VERSION_PATCH to $cupsversionpatch in cups/cups.h (saw $temp)"
		exit 1
	fi

	temp="$(head -6 CHANGES.md | grep "^libcups v" | awk '{print $2}')"
	if test "$temp" != "v$version"; then
		echo "Still need to add Changes in v$version in CHANGES.md (saw $temp)"
		exit 1
	fi

	temp="$(grep LIBCUPS_VERSION vcnet/config.h | awk -F\" '{print $2}')"
	if test "v$temp" != "v$version"; then
	    echo "Still need to update LIBCUPS_VERSION to $version in vcnet/config.h (saw $temp)"
	    exit 1
	fi

        semversion="$(echo $version | sed -E -e '1,$s/^([0-9]\.[0-9]+)([a-z1-9]+)$/\1.0-\2/')"
	temp="$(grep '<version>' vcnet/libcups3_native.nuspec | sed -e '1,$s/^[ \t]*<version>//' -e '1,$s/<\/version>$//')"
	if test "v$temp" != "v$semversion"; then
	    echo "Still need to update <version> to $semversion in vcnet/libcups3_native.nuspec (saw $temp)"
	    exit 1
	fi

	temp="$(grep 'libcups3_native.redist' vcnet/libcups3_native.nuspec | awk -F\" '{print $4}')"
	if test "v$temp" != "v$semversion"; then
	    echo "Still need to update libcups3_native.redist version to $semversion in vcnet/libcups3_native.nuspec (saw $temp)"
	    exit 1
	fi

	temp="$(grep '<version>' vcnet/libcups3_native.redist.nuspec | sed -e '1,$s/^[ \t]*<version>//' -e '1,$s/<\/version>$//')"
	if test "v$temp" != "v$semversion"; then
	    echo "Still need to update <version> to $semversion in vcnet/libcups3_native.redist.nuspec (saw $temp)"
	    exit 1
	fi

	temp="$(grep LIBCUPS_VERSION vcnet/config.h | awk -F\" '{print $2}')"
	if test "v$temp" != "v$version"; then
	    echo "Still need to update LIBCUPS_VERSION to $version in vcnet/config.h (saw $temp)"
	    exit 1
	fi

	temp="$(grep LIBCUPS_VERSION xcode/config.h | awk -F\" '{print $2}')"
	if test "v$temp" != "v$version"; then
	    echo "Still need to update LIBCUPS_VERSION to $version in xcode/config.h (saw $temp)"
	    exit 1
	fi

	echo Creating tag for release...
	git tag -m "Tag $version" v$version
	git push origin v$version
fi

fileurl=`echo $fileurl | sed -e '1,$s/\\//\\\\\\//g'`
file="$HOME/libcups-$fileversion-source"

echo Exporting $fileversion...
rm -rf $TMPDIR/libcups-$version
mkdir $TMPDIR/libcups-$version
git archive --format tar HEAD | (cd $TMPDIR/libcups-$version; tar xf -)
(cd pdfio; git archive --prefix=pdfio/ HEAD) | (cd $TMPDIR/libcups-$version; tar xf -)

echo Preparing files...
cd $TMPDIR/libcups-$version
sed -e '1,$s/@CUPS_VERSION@/'$version'/' \
	-e '1,$s/^Source:.*/Source: '$fileurl'/' \
	<packaging/libcups3.spec.in \
	>packaging/libcups3.spec
cd ..

echo Archiving...
tar cf - libcups-$version | gzip -v9 >$file.tar.gz
zip -r $file.zip libcups-$version

if test $SIGNFILES = yes; then
	echo Signing...
	gpg --detach-sign $file.tar.gz
	gpg --detach-sign $file.zip
fi

echo Removing temporary files...
rm -rf libcups-$version

echo "Done - files in $HOME."
